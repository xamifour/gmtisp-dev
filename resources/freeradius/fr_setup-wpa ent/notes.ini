# --- FreeRADIUS Virtual Server Configuration Notes ---

"""To define and enable virtual server configurations in FreeRADIUS for multiple organizations 
in ubuntu, you typically follow these steps, focusing on creating configurations for 
organization_a and organization_b as examples:"""


"""
1. Define Virtual Server Configurations
First, you need to create separate configuration files for each organization under the sites-available directory:
"""
# bash, create organization_a file in /etc/freeradius/3.0/sites-available
sudo nano /etc/freeradius/3.0/sites-available/organization_a

# Inside organization_a file, define the virtual server configuration. Here’s a basic example:
server organization_a {
    authorize {
        ...
    }
    authenticate {
        ...
    }
    ...
}

; Similarly, create a configuration for organization_b:

# bash, create organization_b file in /etc/freeradius/3.0/sites-available
sudo nano /etc/freeradius/3.0/sites-available/organization_b

# Inside organization_b file, define the virtual server configuration. Here’s a basic example:
server organization_b {
    authorize {
        ...
    }
    authenticate {
        ...
    }
    ...
}

"""
2. Enable Virtual Servers
After defining the configurations in sites-available, you need to enable them by creating symbolic links in the 
sites-enabled directory:
"""

# bash
sudo ln -s /etc/freeradius/3.0/sites-available/organization_a /etc/freeradius/3.0/sites-enabled/organization_a
sudo ln -s /etc/freeradius/3.0/sites-available/organization_b /etc/freeradius/3.0/sites-enabled/organization_b

"""
3. Verify Configuration and Restart FreeRADIUS
Before restarting FreeRADIUS, it's essential to check the configuration files for any syntax errors or warnings. 
You can use the -t option to test the configuration:
"""

# bash
sudo radiusd -X -t
# If there are no errors, restart FreeRADIUS to apply the changes:

# bash
sudo systemctl restart freeradius


"""
Notes:
File Permissions: Ensure that the configuration files (organization_a, organization_b, etc.) have appropriate permissions and are readable by FreeRADIUS.

Debugging: Use radiusd -X to run FreeRADIUS in debug mode, which provides detailed logs for troubleshooting any issues.
"""



"""Combined Configuration File
Create a combined configuration file in the sites-available directory:"""

# create a gmtisp_multi_orgs file in /etc/freeradius/3.0/sites-available
# bash
sudo nano /etc/freeradius/3.0/sites-available/gmtisp_multi_orgs

# Inside this gmtisp_multi_orgs file, define the virtual server configurations for both organization_a and organization_b:
# you may add more organizations as needed
server organization_a {
    authorize {
        # Add authorization rules for organization_a here
        ...
    }
    authenticate {
        # Add authentication methods for organization_a here
        ...
    }
    ...
}

server organization_b {
    authorize {
        # Add authorization rules for organization_b here
        ...
    }
    authenticate {
        # Add authentication methods for organization_b here
        ...
    }
    ...
}

"""
Enable the Combined Configuration
After creating the combined configuration file, you need to enable it by creating a symbolic link 
in the sites-enabled directory:
"""

# bash
sudo ln -s /etc/freeradius/3.0/sites-available/gmtisp_multi_orgs /etc/freeradius/3.0/sites-enabled/gmtisp_multi_orgs

# bash
sudo systemctl restart freeradius

"""
By combining the configurations into one file, you can manage multiple virtual servers in a single location, 
simplifying configuration management.
"""

# --- End FreeRADIUS Virtual Server Configuration Notes ---






"""
Yes, it is acceptable to combine server configurations, inner-tunnel configurations, 
and EAP module instances into single files for multiple organizations in FreeRADIUS. 
FreeRADIUS is flexible and allows multiple virtual servers, inner-tunnel servers, 
and EAP configurations to be defined within a single configuration file. Here's how you can do it:
"""

"""
1. Combined Virtual Server Configuration
Create a single configuration file for both org_a and org_b:
"""

# bash, create virtual_server_multi_orgs file in /etc/freeradius/3.0/sites-available
sudo nano /etc/freeradius/3.0/sites-available/virtual_server_multi_orgs

# Add the following content to define the virtual server configurations for org_a and org_b:
# you may add more organizations as needed

; example, org_a for gies
server org_a {
    listen {
        type = auth
        ipaddr = *
        port = 1812
        limit {
          max_connections = 16
          lifetime = 0
          idle_timeout = 30
        }
    }

    listen {
        ipaddr = *
        port = 1813
        type = acct
        limit {}
    }

    api_token_header = "Authorization: Bearer <org_a_uuid> <org_a_radius_api_token>"

    authorize {
        eap {
            ok = return
        }

        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest
    }

    authenticate {
        Auth-Type eap {
            eap
        }
    }

    post-auth {
        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest

        Post-Auth-Type REJECT {
            update control { &REST-HTTP-Header += "${...api_token_header}" }
            rest
        }
    }

    accounting {
        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest
    }

    preacct {
        acct_unique
    }
}

; example, org_b for gigmeg
server org_b {
    listen {
        type = auth
        ipaddr = *
        port = 1814
        limit {
          max_connections = 16
          lifetime = 0
          idle_timeout = 30
        }
    }

    listen {
        ipaddr = *
        port = 1815
        type = acct
        limit {}
    }

    api_token_header = "Authorization: Bearer <org_b_uuid> <org_b_radius_api_token>"

    authorize {
        eap {
            ok = return
        }

        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest
    }

    authenticate {
        Auth-Type eap {
            eap
        }
    }

    post-auth {
        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest

        Post-Auth-Type REJECT {
            update control { &REST-HTTP-Header += "${...api_token_header}" }
            rest
        }
    }

    accounting {
        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest
    }

    preacct {
        acct_unique
    }
}


"""
2. Combined Inner-Tunnel Configuration
Create a single inner-tunnel configuration file for both org_a and org_b:
"""

# bash, create inner-inner_tunnel_multi_orgs file in /etc/freeradius/3.0/sites-available
sudo nano /etc/freeradius/3.0/sites-available/inner_tunnel_multi_orgs

# Add the following content to define the inner-tunnel configurations for org_a and org_b:
server inner_tunnel_org_a {
    listen {
        ipaddr = 127.0.0.1
        port = 18120
        type = auth
    }

    api_token_header = "Authorization: Bearer <org_a_uuid> <org_a_radius_api_token>"

    authorize {
        filter_username
        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest

        eap {
            ok = return
        }

        expiration
        logintime

        pap
    }

    authenticate {
        Auth-Type PAP {
            pap
        }

        Auth-Type CHAP {
            chap
        }

        Auth-Type MS-CHAP {
            mschap
        }
        eap
    }

    session {}

    post-auth {}

    pre-proxy {}
    post-proxy {
        eap
    }
}

server inner_tunnel_org_b {
    listen {
        ipaddr = 127.0.0.1
        port = 18121
        type = auth
    }

    api_token_header = "Authorization: Bearer <org_b_uuid> <org_b_radius_api_token>"

    authorize {
        filter_username
        update control { &REST-HTTP-Header += "${...api_token_header}" }
        rest

        eap {
            ok = return
        }

        expiration
        logintime

        pap
    }

    authenticate {
        Auth-Type PAP {
            pap
        }

        Auth-Type CHAP {
            chap
        }

        Auth-Type MS-CHAP {
            mschap
        }
        eap
    }

    session {}

    post-auth {}

    pre-proxy {}
    post-proxy {
        eap
    }
}


"""
3. Combined EAP Module Configuration
Create a single EAP module configuration file for both org_a and org_b:
"""

# bash, create eap_multi_orgs file in /etc/freeradius/3.0/mods-available
sudo nano /etc/freeradius/3.0/mods-available/eap_multi_orgs

# Add the following content to define the EAP module for org_a and org_b:
# you may add more if needed
eap {
    eap_org_a {
        default_eap_type = ttls
        timer_expire = 60
        ignore_unknown_eap_types = no
        cisco_accounting_username_bug = no
        max_sessions = ${max_requests}

        tls-config tls-common {
            private_key_password = whatever
            private_key_file = /etc/ssl/private/ssl-cert-snakeoil.key
            certificate_file = /etc/ssl/certs/ssl-cert-snakeoil.pem
            ca_file = /etc/ssl/certs/ca-certificates.crt
            dh_file = ${certdir}/dh
            ca_path = ${cadir}
            cipher_list = "DEFAULT"
            cipher_server_preference = no
            ecdh_curve = "prime256v1"

            cache {
                enable = no
            }

            ocsp {
                enable = no
                override_cert_url = yes
                url = "http://127.0.0.1/ocsp/"
            }
        }

        ttls {
            tls = tls-common
            default_eap_type = pap
            copy_request_to_tunnel = yes
            use_tunneled_reply = yes
            virtual_server = "inner_tunnel_org_a"
        }
    }

    eap_org_b {
        default_eap_type = ttls
        timer_expire = 60
        ignore_unknown_eap_types = no
        cisco_accounting_username_bug = no
        max_sessions = ${max_requests}

        tls-config tls-common {
            private_key_password = whatever
            private_key_file = /etc/ssl/private/ssl-cert-snakeoil.key
            certificate_file = /etc/ssl/certs/ssl-cert-snakeoil.pem
            ca_file = /etc/ssl/certs/ca-certificates.crt
            dh_file = ${certdir}/dh
            ca_path = ${cadir}
            cipher_list = "DEFAULT"
            cipher_server_preference = no
            ecdh_curve = "prime256v1"

            cache {
                enable = no
            }

            ocsp {
                enable = no
                override_cert_url = yes
                url = "http://127.0.0.1/ocsp/"
            }
        }

        ttls {
            tls = tls-common
            default_eap_type = pap
            copy_request_to_tunnel = yes
            use_tunneled_reply = yes
            virtual_server = "inner_tunnel_org_b"
        }
    }
}


"""
4. Enable the Configurations
Enable the combined configurations by creating symbolic links in the sites-enabled and 
mods-enabled directories:
"""

# bash
sudo ln -s /etc/freeradius/3.0/sites-available/virtual_server_multi_orgs /etc/freeradius/3.0/sites-enabled/
sudo ln -s /etc/freeradius/3.0/sites-available/inner_tunnel_multi_orgs /etc/freeradius/3.0/sites-enabled/
sudo ln -s /etc/freeradius/3.0/mods-available/eap_multi_orgs /etc/freeradius/3.0/mods-enabled/


"""
5. Restart FreeRADIUS
Finally, restart the FreeRADIUS service to apply the new configurations:
"""

# bash
sudo systemctl restart freeradius

"""
This combined approach is acceptable to FreeRADIUS and helps in managing the configurations more 
efficiently. Each section is independently configured for org_a and org_b, ensuring that they are 
logically separated within the same file.
"""






